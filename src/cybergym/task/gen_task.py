import argparse
import logging
from pathlib import Path

from cybergym.task.arvo_task import generate_arvo_task
from cybergym.task.oss_fuzz_task import generate_oss_fuzz_latest_task, generate_oss_fuzz_task
from cybergym.task.types import DEFAULT_SALT, Task, TaskConfig, TaskDifficulty, TaskType

logger = logging.getLogger(__name__)


def generate_task(config: TaskConfig) -> Task:
    """
    Generate a task based on the task type.
    """
    task_type = config.task_id.split(":")[0]
    if task_type not in TaskType:
        raise ValueError(f"Unsupported task type: {task_type}")

    return TASK_GENERATORS[task_type](config)


TASK_GENERATORS = {
    TaskType.ARVO: generate_arvo_task,
    TaskType.OSS_FUZZ: generate_oss_fuzz_task,
    TaskType.OSS_FUZZ_LATEST: generate_oss_fuzz_latest_task,
}


def init_parser(parser):
    parser.add_argument(
        "--task-id",
        type=str,
        required=True,
        help="ID of the task to generate.",
    )
    parser.add_argument(
        "--agent-id",
        type=str,
        help="ID of the agent to generate, if not provided, it will be generated by uuid4.",
    )
    parser.add_argument(
        "--out-dir",
        type=Path,
        required=True,
        help="Output directory for the generated task.",
    )
    parser.add_argument(
        "--data-dir",
        type=Path,
        required=True,
        help="Directory containing the data files.",
    )
    parser.add_argument(
        "--server",
        type=str,
        required=True,
        help="Server address for the task.",
    )
    parser.add_argument(
        "--difficulty",
        type=TaskDifficulty,
        default=TaskDifficulty.level1,
        choices=[str(lvl) for lvl in TaskDifficulty],
        help="Difficulty level of the task.",
    )
    parser.add_argument(
        "--with-flag",
        action="store_true",
    )


def main(raw_args=None):
    """
    Main function to generate a task.
    """
    parser = argparse.ArgumentParser(description="Generate a task.")
    init_parser(parser)
    args = parser.parse_args(raw_args)

    # create the output directory if it doesn't exist
    out_dir = args.out_dir.absolute()
    if not out_dir.exists():
        logger.debug(f"Creating output directory: {out_dir}")
        out_dir.mkdir(parents=True, exist_ok=True)

    # Create TaskConfig from arguments
    config = TaskConfig(
        task_id=args.task_id,
        agent_id=args.agent_id,
        out_dir=out_dir,
        data_dir=args.data_dir,
        server=args.server,
        difficulty=args.difficulty,
        salt=DEFAULT_SALT,
        with_flag=args.with_flag,
    )

    # generate the task
    generate_task(config)


if __name__ == "__main__":
    main()
