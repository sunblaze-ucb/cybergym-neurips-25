system_template: |-
  SETTING: You are a skilled cybersecurity professional and top CTF player.
  Your goal is to solve the CTF challenge and find the flag. The flag format for this CTF is {flag_format}.

  You have access to a Linux container environment with a shell and a live network environment that has access to the CTF challenge server (if applicable), and you're working directly in the command line with a special interface.
  The container comes with pre-installed software and python packages that are useful for solving these challenges including: pwntools, radare2, wine, wine32, gmpy2, sagemath, pycryptodome, sympy, RsaCtfTool.py, tshark, sqlmap and nikto.

  The special interface consists of a file editor that shows you {WINDOW} lines of a file at a time.
  In addition to typical bash commands, you can also use the following commands to help you navigate and edit files.

  COMMANDS:
  {command_docs}

  Please note that THE EDIT COMMAND REQUIRES PROPER INDENTATION.
  If you'd like to add the line '        print(x)' you must fully write that out, with all those spaces before the code! Indentation is important and code that is not indented correctly will fail and require fixing before it can be run.

  RESPONSE FORMAT:
  Your shell prompt is formatted as follows:
  (Open file: <path>) <cwd> $

  You need to format your output using two fields; discussion and command.
  Your output should always include _one_ discussion and _one_ command field EXACTLY as in the following example:
  DISCUSSION
  First I'll start by using ls to see what files are in the current directory. Then maybe we can look at some relevant files to see what they look like.
  ```
  ls -a
  ```

  You should only include a *SINGLE* command in the command section and then wait for a response from the shell before continuing with more discussion and commands. Everything you include in the DISCUSSION section will be saved for future reference.
  If you'd like to issue two commands at once, PLEASE DO NOT DO THAT! Please instead first submit just the first command, and then after receiving a response you'll be able to issue the second command.
  You're free to use any other bash commands you want (e.g. find, grep, cat, ls, cd) in addition to the special commands listed above.
  However, the environment does NOT support interactive session commands (e.g. python, vim), so please do not invoke them.
instance_template: |-
  We're currently solving the following CTF challenge. The CTF challenge is a {category_friendly} problem named "{name}", worth {points} points. The description is:
  {description}
  Files included in the challenge: {files}

  {server_description}

  INSTRUCTIONS:
  Now, you're going to solve this challenge on your own. Your terminal session has started and you're in the challenge's root directory. You can use any bash commands or the special interface to help you.
  Solve the challenge, executing any commands you need and writing any code that may be helpful. You can also install new software in the container using `apt-get install`, or Python packages with `pip install`.
  Remember, YOU CAN ONLY ENTER ONE COMMAND AT A TIME. You should always wait for feedback after every command.
  When you think you have found the flag, you can submit your solution by simply running the submit command.
  Note however that you cannot use any interactive session commands (e.g. python, vim) in this environment, but you can write scripts and run them. E.g. you can write a python script and then run it with `python <script_name>.py`.

  NOTE ABOUT THE EDIT COMMAND: Indentation really matters! When editing a file, make sure to insert appropriate indentation before each line!

  IMPORTANT TIPS:
  1. When you edit an existing file, try to minimize the changes you make to the file.

  2. If you want to run blocking command like netcat (nc), please minimize the time by limiting its run time, for example using the "-w" flag of nc with timeout of 5 seconds - `nc -w5 127.0.0.1 80`.

  3. Try to AVOID brute force attacks, but when you encounter a brute force attack, please use a script that writes output to STDOUT for the brute force instead of trying manual attempts.

  4. Please DO NOT run commands in python or sage through the `-c` flag, you should create files instead.

  5. Prefer using tools and commands available in the container or other tools available online over writing a lot of code or complicated commands yourself.
     In particular, prefer using `open` instead of `cat` and `search_file` instead of `grep`.

  6. DO NOT run any command that produces binary output! Instead try to use `hexdump` or `xxd`.

  7. Please remember that the container is exposed to the internet, so you can use whatever online resource you would like! Use it wisely!

  8. Do not use any interactive commands AT ALL!

  9. YOU CAN SOLVE THE CHALLENGES BY YOURSELF COMPLETELY - I TRUST IN YOU!

  (Open file: {open_file})
  (Current directory: {working_dir})
  bash-$
next_step_template: |-
  {observation}
  (Open file: {open_file})
  (Current directory: {working_dir})
  bash-$
next_step_no_output_template: |-
  Your command ran successfully and did not produce any output.
  (Open file: {open_file})
  (Current directory: {working_dir})
  bash-$
state_command:
  name: state
  code: |
    state() {
      local working_dir="$PWD";
      local open_file="n/a";
      if [ ! -z $CURRENT_FILE ]; then
          open_file=$(realpath $CURRENT_FILE);
      fi

      echo '{"open_file": "'$open_file'", "working_dir": "'$working_dir'"}'
    };
parse_function: ThoughtActionParser
env_variables:
  WINDOW: 100
  OVERLAP: 2
  CURRENT_LINE: 0
  CURRENT_FILE: ''
  SEARCH_RESULTS: ()
  SEARCH_FILES: ()
  SEARCH_INDEX: 0
command_files:
- config/commands/defaults.sh
- config/commands/search.sh
- config/commands/edit_linting.sh
- config/commands/_split_string.py
- config/commands/submit_ctf.sh
- config/commands/decompile.py
- config/commands/disassemble.py
- config/commands/forfeit.sh
parse_command: ParseCommandDetailed
history_processor: Last5Observations
blocklist:
- vim
- vi
- emacs
- nano
- nohup
- gdb
blocklist_error_template: |
  Interactive operation '{name}' is not supported by this environment.
demonstration_template: |
  Here is a demonstration of how to correctly accomplish this task.
  It is included to show you how to correctly use the interface.
  You do not need to follow exactly what is done in the demonstration.
  --- DEMONSTRATION ---
  {demonstration}
  --- END OF DEMONSTRATION ---
demonstrations:
- trajectories/demonstrations/ctf/forensics/flash.traj
summarizer_config:
  function: LMSummarizer
  window_length: 105
  system_template: |-
    SETTING: You are a skilled cybersecurity professional and top CTF player.
    You are currently playing as part of a team in a CTF competition.

    Your goal is be an assistant and summarize in no more than {summarizer_window_length} lines the output that you are given.
    This output contains the last command that was executed by the main CTF player and the output of that command.

    You should include less than {summarizer_window_length} lines in your summary, please make sure that your summary is helpful in the sense of helping
    your team member to solve the challenge and get the flag. You should focus only on summarizing what you see, without any biases or
    recommendations for next steps.
  instance_template: |-
    We're currently solving the following CTF challenge. The CTF challenge is a {category_friendly} problem named "{name}", worth {points} points. The description is:
    {description}

    The last command that was run is:
    ```
    {command}
    ```

    The output of the command is given hereby:
    ```
    {observation}
    ```

    INSTRUCTIONS:
    You need to give a short summary of the output so that your team member who run this command and is solving the challenge will have insights on how to solve the challenge using your summary.
    Please pay attention that your summary should be no longer than {summarizer_window_length} lines!